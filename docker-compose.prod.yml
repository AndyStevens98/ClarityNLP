version: '3'

networks:
  clarity:
    driver: bridge

volumes:
  redisdata:
  nlp-solrdata:
  nlp-pgdata:
  nlp-mongodata:
  ingest-files:
  ingest-mongodata:

services:
  identity-provider:
    container_name: 'IDENTITY_PROVIDER'
    build:
      context: ./identity-provider
      dockerfile: Dockerfile
    expose:
      - ${IDENTITY_PROVIDER_CONTAINER_PORT}
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - LETSENCRYPT_HOST=${IDENTITY_PROVIDER_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${IDENTITY_PROVIDER_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${IDENTITY_PROVIDER_CONTAINER_PORT}
    networks:
      - clarity

  identity-and-access-proxy:
    container_name: IDENTITY_AND_ACCESS_PROXY
    hostname: identity-and-access-proxy
    build:
      context: ./identity-and-access-proxy
      dockerfile: Dockerfile
    expose:
      - ${IDENTITY_AND_ACCESS_PROXY_CONTAINER_PORT}
    entrypoint: pm2-runtime
    command: proxy.js
    environment:
      - LETSENCRYPT_HOST=${IDENTITY_AND_ACCESS_PROXY_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${IDENTITY_AND_ACCESS_PROXY_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${IDENTITY_AND_ACCESS_PROXY_CONTAINER_PORT}
      - PROTOCOL=${PROTOCOL}
      - DOMAIN=${DOMAIN}
      - DASHBOARD_CLIENT_SUBDOMAIN=${DASHBOARD_CLIENT_SUBDOMAIN}
      - INGEST_CLIENT_SUBDOMAIN=${INGEST_CLIENT_SUBDOMAIN}
      - RESULTS_CLIENT_SUBDOMAIN=${RESULTS_CLIENT_SUBDOMAIN}
    networks:
      - clarity

  nlp-api:
    container_name: NLP_API
    hostname: ${NLP_API_HOSTNAME}
    build:
      context: ./nlp
      dockerfile: Dockerfile #TODO need prod Dockerfile
    expose:
      - ${NLP_API_CONTAINER_PORT}
    entrypoint:
      - /wait-for-it-extra.sh
      - ${NLP_SOLR_HOSTNAME}:${NLP_SOLR_CONTAINER_PORT}
      - ${NLP_MONGO_HOSTNAME}:${NLP_MONGO_CONTAINER_PORT}
      - ${SCHEDULER_HOSTNAME}:${SCHEDULER_CONTAINER_PORT}
      - ${NLP_PG_HOSTNAME}:${NLP_PG_CONTAINER_PORT}
      - ${REDIS_HOSTNAME}:${REDIS_CONTAINER_PORT}
      - --timeout=420
      - --
      - python3
    command: api.py
    environment:
      - NLP_API_TMP_DIR=${NLP_API_TMP_DIR}
      - NLP_API_LOG_DIR=${NLP_API_LOG_DIR}
      - NLP_SOLR_URL=${NLP_SOLR_URL}
      - NLP_API_DEBUG_MODE=${NLP_API_DEBUG_MODE}
      - NLP_EXPRESSION_EVALUATOR=${NLP_EXPRESSION_EVALUATOR}
      - NLP_API_URL=${NLP_API_URL}
      - BATCH_SIZE=${BATCH_SIZE}
      - RESULTS_CLIENT_URL=${RESULTS_URL}
      - USE_MEMORY_CACHING=${USE_MEMORY_CACHING}
      - USE_PRECOMPUTED_SEGMENTATION=${USE_PRECOMPUTED_SEGMENTATION}
      - USE_REORDERED_NLPQL=${USE_REORDERED_NLPQL}
      - USE_REDIS_CACHING=${USE_REDIS_CACHING}
      - OHDSI_WEBAPI_URL=${OHDSI_WEBAPI_URL}
      - SOLR_TEXT_FIELD=${SOLR_TEXT_FIELD}
      - SOLR_ID_FIELD=${SOLR_ID_FIELD}
      - SOLR_REPORT_ID_FIELD=${SOLR_REPORT_ID_FIELD}
      - SOLR_SOURCE_FIELD=${SOLR_SOURCE_FIELD}
      - SOLR_REPORT_DATE_FIELD=${SOLR_REPORT_DATE_FIELD}
      - SOLR_SUBJECT_FIELD=${SOLR_SUBJECT_FIELD}
      - SOLR_REPORT_TYPE_FIELD=${SOLR_REPORT_TYPE_FIELD}
      - NLP_PG_HOSTNAME=${NLP_PG_HOSTNAME}
      - NLP_PG_DATABASE=${NLP_PG_DATABASE}
      - NLP_PG_USER=${NLP_PG_USER}
      - NLP_PG_PASSWORD=${NLP_PG_PASSWORD}
      - NLP_PG_CONTAINER_PORT=${NLP_PG_CONTAINER_PORT}
      - NLP_MONGO_HOSTNAME=${NLP_MONGO_HOSTNAME}
      - NLP_MONGO_CONTAINER_PORT=${NLP_MONGO_CONTAINER_PORT}
      - NLP_MONGO_DATABASE=${NLP_MONGO_DATABASE}
      - NLP_MONGO_WORKING_INDEX=${NLP_MONGO_WORKING_INDEX}
      - NLP_MONGO_WORKING_COLLECTION=${NLP_MONGO_WORKING_COLLECTION}
      - NLP_MONGO_USERNAME=${NLP_MONGO_USERNAME}
      - NLP_MONGO_PASSWORD=${NLP_MONGO_PASSWORD}
      - LUIGI_SCHEDULER_URL=${LUIGI_SCHEDULER_URL}
      - LUIGI_URL=${LUIGI_URL}
      - LUIGI_WORKERS=${LUIGI_WORKERS}
      - REDIS_HOSTNAME=${REDIS_HOSTNAME}
      - REDIS_HOST_PORT=${REDIS_HOST_PORT}
      - REDIS_CONTAINER_PORT=${REDIS_CONTAINER_PORT}
    networks:
      - clarity
    depends_on:
      - redis
      - nlp-solr
      - nlp-mongo
      - nlp-postgres
      - scheduler

  scheduler:
    container_name: LUIGI_SCHEDULER
    hostname: ${SCHEDULER_HOSTNAME}
    image: axiom/docker-luigi:2.7.1
    expose:
      - ${SCHEDULER_CONTAINER_PORT}
    environment:
      - LETSENCRYPT_HOST=${SCHEDULER_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${SCHEDULER_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${SCHEDULER_CONTAINER_PORT}
    networks:
      - clarity

  nlp-solr:
    container_name: NLP_SOLR
    hostname: ${NLP_SOLR_HOSTNAME}
    build:
      context: ./utilities/nlp-solr
      dockerfile: Dockerfile
    expose:
      - ${NLP_SOLR_CONTAINER_PORT}
    volumes:
      - nlp-solrdata:/opt/solr/server/solr/mycores
    environment:
      - SOLR_HEAP=${SOLR_HEAP}
    networks:
      - clarity

  nlp-mongo:
    container_name: NLP_MONGO
    hostname: ${NLP_MONGO_HOSTNAME}
    build:
      context: ./utilities/nlp-mongo
      dockerfile: Dockerfile.prod
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_DATABASE=${NLP_MONGO_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${NLP_MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${NLP_MONGO_PASSWORD}
    expose:
      - ${NLP_MONGO_CONTAINER_PORT}
    volumes:
      - nlp-mongodata:/data/db
    networks:
      - clarity

  nlp-postgres:
    container_name: NLP_POSTGRES
    hostname: ${NLP_PG_HOSTNAME}
    build: .utilities/nlp-postgres
    environment:
      POSTGRES_USER: ${NLP_PG_USER}
      POSTGRES_PASSWORD: ${NLP_PG_PASSWORD}
      POSTGRES_DB: ${NLP_PG_DATABASE}
    expose:
      - ${NLP_PG_CONTAINER_PORT}
    volumes:
      - nlp-pgdata:/var/lib/postgresql/data/
    networks:
      - clarity

  ingest-api:
    container_name: INGEST_API
    hostname: ${INGEST_API_HOSTNAME}
    build:
      context: ./utilities/ingest-api
      dockerfile: Dockerfile.prod
    build: ./utilities/ingest-api
    volumes:
      - /app/node_modules/ #empties container node_modules, forces bcrypt to be built on container
      - ingest-files:/var/lib/ingest-files
    expose:
      - "${INGEST_API_CONTAINER_PORT}"
    entrypoint:
      - /app/wait-for-it-extra.sh
      - ${NLP_SOLR_HOSTNAME}:${NLP_SOLR_CONTAINER_PORT}
      - ${REDIS_HOSTNAME}:${REDIS_CONTAINER_PORT}
      - ${INGEST_MONGO_HOSTNAME}:${INGEST_MONGO_CONTAINER_PORT}
      - --timeout=420
      - --
      - pm2-runtime
    command: app.js
    environment:
      - NODE_ENV=production
      - JOB_TYPES=ingest
      - NLP_SOLR_HOSTNAME=${NLP_SOLR_HOSTNAME}
      - NLP_SOLR_CONTAINER_PORT=${NLP_SOLR_CONTAINER_PORT}
      - NLP_CORE_NAME=${NLP_CORE_NAME}
      - NLP_SOLR_URL_TOP_LEVEL=${NLP_SOLR_URL_TOP_LEVEL}
      - INGEST_MONGO_USERNAME=${INGEST_MONGO_USERNAME}
      - INGEST_MONGO_PASSWORD=${INGEST_MONGO_PASSWORD}
      - INGEST_MONGO_HOSTNAME=${INGEST_MONGO_HOSTNAME}
      - INGEST_MONGO_CONTAINER_PORT=${INGEST_MONGO_CONTAINER_PORT}
      - INGEST_MONGO_DATABASE=${INGEST_MONGO_DATABASE}
      - BASE_URL=${BASE_URL}
      - INGEST_CLIENT_HOST_PORT=${INGEST_CLIENT_HOST_PORT}
      - INGEST_API_LOG_LEVEL=${INGEST_API_LOG_LEVEL}
      - REDIS_HOSTNAME=${REDIS_HOSTNAME}
      - REDIS_CONTAINER_PORT=${REDIS_CONTAINER_PORT}
    networks:
      - clarity
    depends_on:
      - ingest-mongo
      - redis
      - nlp-solr

  ingest-mongo:
    container_name: '${INGEST_MONGO_CONTAINER_NAME}'
    hostname: ${INGEST_MONGO_HOSTNAME}
    build:
      context: ./utilities/ingest-mongo
      dockerfile: Dockerfile.prod
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_DATABASE=${INGEST_MONGO_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${INGEST_MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${INGEST_MONGO_PASSWORD}
    expose:
      - "${INGEST_MONGO_CONTAINER_PORT}"
    volumes:
      - 'ingest-mongodata:/data/db'
    networks:
      - clarity

  ingest-client:
    container_name: INGEST_CLIENT
    hostname: ${INGEST_CLIENT_HOSTNAME}
    build:
      context: ./utilities/ingest-client
      dockerfile: Dockerfile.prod
    environment:
      - PORT=${INGEST_CLIENT_CONTAINER_PORT}
      - LETSENCRYPT_HOST=${INGEST_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${INGEST_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${INGEST_CLIENT_VIRTUAL_PORT}
      - REACT_APP_IDENTITY_PROVIDER_URL=${IDENTITY_PROVIDER_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_API_HOST=${IDENTITY_AND_ACCESS_PROXY_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_DASHBOARD_URL=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_RESULTS_URL=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
    volumes:
      - /app/node_modules
    networks:
      - clarity

  redis:
    container_name: REDIS
    hostname: ${REDIS_HOSTNAME}
    image: redis:4.0.10
    expose:
      - ${REDIS_CONTAINER_PORT}
    volumes:
      - redisdata:/data
    networks:
      - clarity

  results-client:
    container_name: RESULTS_CLIENT
    hostname: ${RESULTS_CLIENT_HOSTNAME}
    build:
      context: ./utilities/results-client
      dockerfile: Dockerfile.prod
    environment:
      - PORT=${RESULTS_CLIENT_CONTAINER_PORT}
      - LETSENCRYPT_HOST=${RESULTS_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${RESULTS_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${RESULTS_CLIENT_VIRTUAL_PORT}
      - REACT_APP_IDENTITY_PROVIDER_URL=${IDENTITY_PROVIDER_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_API_HOST=${IDENTITY_AND_ACCESS_PROXY_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_DASHBOARD_URL=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_INGEST_URL=${INGEST_CLIENT_SUBDOMAIN}.${DOMAIN}
    volumes:
      - /app/node_modules
    networks:
      - clarity

  dashboard-client:
    container_name: DASHBOARD_CLIENT
    hostname: ${DASHBOARD_CLIENT_HOSTNAME}
    build:
      context: ./utilities/dashboard-client/client
      dockerfile: Dockerfile.prod
    environment:
      - PORT=${DASHBOARD_CLIENT_CONTAINER_PORT}
      - LETSENCRYPT_HOST=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_HOST=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
      - VIRTUAL_PORT=${DASHBOARD_CLIENT_VIRTUAL_PORT}
      - REACT_APP_IDENTITY_PROVIDER_URL=${IDENTITY_PROVIDER_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_API_HOST=${IDENTITY_AND_ACCESS_PROXY_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_INGEST_URL=${INGEST_CLIENT_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_RESULTS_URL=${DASHBOARD_CLIENT_SUBDOMAIN}.${DOMAIN}
      - REACT_APP_DOCUMETATION_URL=https://claritynlp.readthedocs.io/en/latest/index.html
    volumes:
      - /app/node_modules
    networks:
      - clarity

  dashboard-api:
    container_name: DASHBOARD_API
    hostname: ${DASHBOARD_API_HOSTNAME}
    build:
      context: ./utilities/dashboard-client
      dockerfile: Dockerfile.prod
    expose:
      - ${DASHBOARD_API_CONTAINER_PORT}
    entrypoint:
      - /app/wait-for-it-extra.sh
      - ${NLP_SOLR_HOSTNAME}:${NLP_SOLR_CONTAINER_PORT}
      - ${NLP_API_HOSTNAME}:${NLP_API_CONTAINER_PORT}
      - --timeout=420
      - --
      - pm2-runtime
    command: index.js
    environment:
      - DASHBOARD_API_CONTAINER_PORT=${DASHBOARD_API_CONTAINER_PORT}
      - NLP_API_HOSTNAME=${NLP_API_HOSTNAME}
      - NLP_API_CONTAINER_PORT=${NLP_API_CONTAINER_PORT}
      - NLP_SOLR_HOSTNAME=${NLP_SOLR_HOSTNAME}
      - NLP_SOLR_CONTAINER_PORT=${NLP_SOLR_CONTAINER_PORT}
      - INTERVAL=${INTERVAL}
    networks:
      - clarity
    depends_on:
      - nlp-api
      - nlp-solr

  nginx-proxy:
    container_name: NGINX_PROXY
    hostname: nginx-proxy
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    networks:
      - clarity

  letsencrypt:
    container_name: LETS_ENCRYPT
    hostname: nginx-proxy-le
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - nginx-proxy
    networks:
      - clarity
