version: '3'

volumes:
  mapper-pgdata:
  mapper-redisdata:
  nlp-solrdata:
  nlp-pgdata:
  nlp-mongodata:

services:

  nlp-api:
    container_name: 'NLP_API'
    hostname: ${NLP_API_HOSTNAME}
    build:
      context: ./nlp
      dockerfile: Dockerfile
    ports:
      - "${NLP_API_HOST_PORT}:${NLP_API_CONTAINER_PORT}"
    volumes:
      - ./nlp:/api
    command: ["/api/scripts/wait-for-it.sh", "${NLP_SOLR_HOSTNAME}:${NLP_SOLR_CONTAINER_PORT}", "${NLP_MONGO_HOSTNAME}:${NLP_MONGO_CONTAINER_PORT}", "${SCHEDULER_HOSTNAME}:${SCHEDULER_CONTAINER_PORT}", "${NLP_PG_HOSTNAME}:${NLP_PG_CONTAINER_PORT}", "--timeout=1800", "--", "python3", "api.py"]
    env_file:
      - .env

  scheduler:
    container_name: 'LUIGI_SCHEDULER'
    hostname: ${SCHEDULER_HOSTNAME}
    image: 'axiom/docker-luigi:2.7.1'
    ports:
      - "${SCHEDULER_HOST_PORT}:${SCHEDULER_CONTAINER_PORT}"
    env_file:
      - .env

  nlp-solr:
    container_name: 'NLP_SOLR'
    hostname: ${NLP_SOLR_HOSTNAME}
    image: solr:6.6
    ports:
      - "${NLP_SOLR_HOST_PORT}:${NLP_SOLR_CONTAINER_PORT}"
    volumes:
      - 'nlp-solrdata:/opt/solr/server/solr/mycores'
      - './utilities/nlp-solr/precreate-core:/opt/docker-solr/scripts/precreate-core'
      - './utilities/nlp-solr/sample.csv:/sample.csv'
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - ${NLP_CORE_NAME}
    env_file:
      - .env

  nlp-mongo:
    container_name: 'NLP_MONGO'
    image: mongo
    hostname: ${NLP_MONGO_HOSTNAME}
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_DATABASE=${NLP_MONGO_DATABASE}
    ports:
      - "${NLP_MONGO_HOST_PORT}:${NLP_MONGO_CONTAINER_PORT}"
    volumes:
      - './utilities/nlp-mongo/setup.js:/docker-entrypoint-initdb.d/setup.js'
      - 'nlp-mongodata:/data/db'
    env_file:
      - .env

  nlp-postgres:
    container_name: 'NLP_POSTGRES'
    hostname: ${NLP_PG_HOSTNAME}
    build:
      context: ./utilities/nlp-postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${NLP_PG_USER}
      POSTGRES_PASSWORD: ${NLP_PG_PASSWORD}
      POSTGRES_DB: ${NLP_PG_DATABASE}
    ports:
      - "${NLP_PG_HOST_PORT}:${NLP_PG_CONTAINER_PORT}"
    volumes:
      - './utilities/nlp-postgres/ddl/ddl.sql:/docker-entrypoint-initdb.d/10-ddl.sql'
      - './utilities/nlp-postgres/ddl/omop_vocab.sql:/docker-entrypoint-initdb.d/20-omop_vocab.sql'
      - './utilities/nlp-postgres/dml/load_vocab.sh:/docker-entrypoint-initdb.d/30-load_vocab.sh'
      - './utilities/nlp-postgres/dml/copy_vocab.sql:/docker-entrypoint-initdb.d/40-copy_vocab.sql'
      - './utilities/nlp-postgres/ddl/omop_indexes.sql:/docker-entrypoint-initdb.d/50-omop_indexes.sql'
      - 'nlp-pgdata:/var/lib/postgresql/data/'
    env_file:
      - .env

  mapper-api:
    container_name: MAPPER_API
    hostname: ${MAPPER_API_HOSTNAME}
    build: ./utilities/mapper-api
    volumes:
      - ./utilities/mapper-api:/app
      - /app/node_modules/ #empties container node_modules, forces bcrypt to be built on container
    ports:
      - "${MAPPER_API_HOST_PORT}:${MAPPER_API_CONTAINER_PORT}"
    depends_on:
      - mapper-pg
      - redis
    environment:
      - NODE_ENV=development

  mapper-client:
    container_name: MAPPER_CLIENT
    hostname: ${MAPPER_CLIENT_HOSTNAME}
    build:
      context: ./utilities/mapper-client
      dockerfile: Dockerfile.prod
    ports:
      - "${MAPPER_CLIENT_HOST_PORT}:${MAPPER_CLIENT_CONTAINER_PORT}"

  mapper-pg:
    container_name: 'MAPPER_POSTGRES'
    hostname: ${MAPPER_PG_HOSTNAME}
    image: postgres
    environment:
      POSTGRES_USER: ${MAPPER_PG_USER}
      POSTGRES_PASSWORD: ${MAPPER_PG_PASSWORD}
      POSTGRES_DB: ${MAPPER_PG_DATABASE}
    ports:
      - "${MAPPER_PG_HOST_PORT}:${MAPPER_PG_CONTAINER_PORT}"
    volumes:
      - 'mapper-pgdata:/var/lib/postgresql/data/'

  redis:
    container_name: MAPPER_Redis
    hostname: ${MAPPER_REDIS_HOSTNAME}
    image: redis:3.2.0
    ports:
      - "${MAPPER_REDIS_HOST_PORT}:${MAPPER_REDIS_CONTAINER_PORT}"
    volumes:
    - 'mapper-redisdata:/data'

  swagger:
    container_name: MAPPER_Swagger_Docs
    hostname: ${MAPPER_SWAGGER_HOSTNAME}
    image: swaggerapi/swagger-ui
    environment:
    - "API_URL=${MAPPER_SWAGGER_API_URL}"
    ports:
      - "${MAPPER_SWAGGER_HOST_PORT}:${MAPPER_SWAGGER_CONTAINER_PORT}"
