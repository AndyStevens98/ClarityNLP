// Phenotype library name
phenotype "Septic Transfusion Reaction" version "1";

/* Phenotype library description */
//Fever >=38°C with a rise a rise of >=1°C PLUS any of: rigors, dyspnea, nausea/vomiting, tachycardia, hypotension, shock
description "Septic Transfusion Reaction AABB definition listed in Hong H, Xiao W, Lazarus HM, Good CE, Maitta RW, Jacobs MR. Detection of septic transfusion reactions to platelet transfusions by active and passive surveillance. Blood. 2016 Jan 28;127(4):496-502.";

// # Structured Data Model #
datamodel OMOP version "5.3";

// # Referenced libraries #
// The ClarityCore library provides common functions for simplifying NLP pipeline creation
include ClarityCore version "1.0" called Clarity;
include OHDSIHelpers version "1.0" called OHDSI;

// ## Code Systems ##
codesystem OMOP: "http://omop.org"; // OMOP vocabulary https://github.com/OHDSI/Vocabulary-v5.0;

//## Valuesets (also known as concept sets in OHDSI parlance)
//Using OHDSIHelpers, can reference a URL or can package the conceptset definition in assets folder
valueset RigorsConcepts:OHDSI.getConceptSet("assets/RigorsConcepts.json");
valueset DyspneaConcepts:OHDSI.getConceptSet("assets/DyspneaConcepts.json");
valueset NauseaConcepts:OHDSI.getConceptSet("assets/NauseaConcepts.json");
valueset VomitingConcepts:OHDSI.getConceptSet("assets/VomitingConcepts.json");
valueset TachycardiaConcepts:OHDSI.getConceptSet("assets/VomitingConcepts.json");
valueset HypotensionConcepts:OHDSI.getConceptSet("assets/VomitingConcepts.json");
valueset ShockConcepts:OHDSI.getConceptSet("assets/ShockConcepts.json");

// #Manual Term sets#
// simple example-- termset "Vegetables":["brocolli","carrots","cauliflower"]
// can add expansion of structured concepts from terminologies as well with OMOPHelpers
termset RigorsTerms: ["Rigors",
"Rigoring",
"Rigours",
"Rigouring",
"Chill",
"Chills",
"Shivers",
"Shivering",
"Teeth chattering"];

termset DyspneaTerms: [
"Labored respiration",
"Shortness of breath",
"Short of breath",
"SOB",
"Respiration laboured",
"Respiration labored",
"Laboured respiration",
"Laboured breathing",
"Labored breathing",
"Increased work of breathing",
"Hunger air",
"Gasping",
"Dyspnoea",
"Dyspnea",
"Difficulty breathing",
"Breathlessness",
"Breathing difficult",
"Breath shortness",
"Air hunger"];

termset NauseaTerms: [
"Nausea",
"Nauseated",
"Nauseous",
"Queasy"];

termset VomitingTerms: [
"Vomiting",
"Vomited",
"Vomit",
"Emesis",
"Hyperemesis",
"N/V"];

termset TachycardiaTerms: [
"Tachycardia",
"Tachycardic",
"Rapid HR",
"Tachy"
];

termset HypotensionTerms: [
"Hypotensive",
"Hypotension",
"Low Blood Pressure",
"Blood Pressure Low",
"Low BP",
"Preshock"
];

termset ShockTerms: [
"Shock"
];


// # Document sets## Uses Simple Document Ontology
documentset ProviderNotes:
    Clarity.createDocumentList("'Physician' OR 'Nurse' OR 'Note' OR 'Discharge Summary'");

// #Population
//## Cohorts

//cohort "RBC Transfusion Patients":OHDSI.getCohortByName('RBC New Exposures')
cohort RBCTransfusionPatients:OHDSI.createCohort("assets/RBC_new_exposures.json");

//default population to run analyses
//default population RBCTransfusionPatients

//CDS logical Context (Patient, Document)
context Patient;


define final Tester:
  where hasFever AND hasRigors;

// #phenotype features
define hasRigors:
  Clarity.ProviderAssertion({
    valueset: ["RigorsTerms"],
    documentset: [ProviderNotes]
    });

define hasDyspnea:
  Clarity.ProviderAssertion({
      valueset: ["DyspneaTerms"],
      documentset: [ProviderNotes]
    })
;

define hasNausea:
  Clarity.ProviderAssertion({
    valueset: ["NauseaTerms"],
    documentset: [ProviderNotes]
  });

define hasVomiting:
  Clarity.ProviderAssertion({
    valueset: ["VomitingTerms"],
    documentset: [ProviderNotes]
  });

define hasShock:
  Clarity.ProviderAssertion({
    valueset: ["ShockTerms"],
    documentset: [ProviderNotes]
  });

//Quantitative metrics
define Temperature:
  Clarity.GetTemperature({
    documentset: [All]
  });

define HeartRate:
  Clarity.GetHeartRate({
    documentset: [All]
  });

define BloodPressure:
  Clarity.GetBloodPressure({
    documentset: [All]
  });


